1. 학습방향성
- UI/UX
- 퍼블리셔
- F/E

2. 고용노동부 IT 기관 

1) 삼성사피
2) 코드스테이츠  :
- 강사를 수강생 위장취업 (국비지원 불가능 )
3) 팀스파르타  : 신사업! 클라우드 & AI 사업
4) 멋쟁이사자처럼  : 신사업! 클라우드 & AI 사업

*백엔드 / 풀스택
1) 2가지 분야 확연 나누어질 듯!
- 퍼블리셔 ( ? )
- 프론트엔드 전문가 (* UI/UX 컨트롤가능한 완벽한 전문가)
- 풀스택
- Java & Python & C 기반으로 하고 있는 풀스택 진영
- JS & Node.js & Flutter 기반으로 하고 있는 풀스택 진영



1. Node.js 를 사용하려면 반드시 로컬 컴퓨터에 Node.js를 설치해야함 
* NPM 자동으로설치됨

2. Node.js => Run JavaScript EveryWhere
웹 브라우저가 읽어들일 수 있는 3대장 : HTML,CSS,JS

3. Goggle chrome 웹 브라우저
V8 검색엔진 : JS 코드 웹 브라우저 구현 핵심역할

4. 반드시 node 실행어로 활성화시켜줘야함
- node 활성화 시킨이후 .exit로 탈출

5. Node.js 전세계적으로 인기 !!
https://www.electronjs.org/ => html,css,js로만 만들어진 웹 & 앱 소개 사이트 

6. NPM : Node Package Manager
> 웹 브라우저 바깥에서 JS를 사용해서 무언가를 만들고자 하는데 , 혹시 JS 구현 시 , 도움을 받을 수 있는 확장프로그램들이 모여있는 곳 => ex. 구글 플레이스토어

7. 서점 & 인강 => node는 서버구축이다? 
=> X! server 구현 구축을 많이쓸뿐 서버구축은아니다.

8. node => server 구축 & 구현 & 활용

9. express NPM 내 프레임워크를 활용 > 서버!!
&git-hub연동!
1) 로컬 git
2) git-hub연동

10. npm 사용하기위해 초기화!
npm init
> 현재 이 프로젝트에서 어떤 패키지 매니저를 사용하고 있는지?
> 정보 (*프로젝트명 / 언어)
> license ( MIT : 누구나 자유롭게 가져다가 사용할 수 있도록 허용하는 라이센스 판단  / BSD : 자유롭게 가져다가 사용하는 것은 문제가 없으나 , 수정후 재배포! => 반드시 원작자 동의 얻어야하는 라이센스 개념 / GPL : 원칙적으로 수정이 불가하나 ,동의를 얻는다면 허용 ! (*기본적으로 패키지 매니저의 저작권을 보장해주는 라이센스 개념 )

npx create-react-app . : 해당 루트폴더 안에서 프로젝트생성!


Babel.js => 코드 전부 통합 컴파일러
npm install --save-dev @babel/preset-react

devDependencies <> dependencies
--save-dev : 붙고안붙고 아무 차이 없음
*package.json => 설명서 => 직접적으로 필요한 NPM / 개발을하는 엔지니어의 편의성을 위해서 필요한 NPM 
npm install --save-dev @babel/core @babel/cli @babel/preset-env 설치
babel.config.json 파일 생상


node => 웹브라우저 js
node 파일명 || 명령어 

*babel : js 의 최신문법으로 자동 컴파일링 해줌 + 코드를 작성할 때, 일일히 코드 기능 구현 정상 테스트 하지 않아도 알아서 모니터랑을 해서 노드에서 구현시켜줄 수 있도록 해주는 nodemon 사용!

npm i nodemon --save-dev

Nodemon => 



*데이터 통신 

Server(*항상 켜져있는 꺼지지 않는 창고 혹은 편의점같은느낌) <-> Client
> Client 요청(request) 요구사항 귀기울이고 있음
> listening
> Node는 JS기반으로


사용자는 웹브라우저라는 매개체를 활용해서 특정 브랜드 및 서비스 제품의 데이터를 요청!

웹 브라우저 > 사용자를 대신해서 서버에 요청!! = Client

서버를 구현할 때에는 컨셉!!!
-redux : 미들웨어 (*하드 vs 소프트)

1) client & request
2) 미들웨어 (*next())
3) 파이널웨어 (*출력)

*app.get() : client request 존재, 미들웨어, 파이널웨어 거침
*app.use() : global middleware => 전역 => 어떤 URL에서든지간에 작동이 가능한 미들웨어!
> use()는 get보다 먼저 실행시켜줘야함

> 로그인여부 체크 / 사용자 조건 체크!! 미들웨어 
> 복수의 다양한 미들웨어를 동시에 실행!
> 미들웨어 중에서 기존에 이미 만들어진 미들웨어를 가져다가 사용할수있음! 
(* 미들웨어를 통해서 확인할 수 있는 client의 정보 워낙 다양함!)
> morgan =>  npm i morgan

페이지 라우팅!!
=> react 프로젝트 : todlist / emotion diary / 
=> 만들어내야할 페이지의 개수 x RestApi 할필요 없었음.

*라우터 VS 컨트롤러!!

* export default  VS export

1) 파일에서 출력가능한 파일 개수를 정의 할수있음
2) export default : import해오는 파일에서 파일명 수정 가능
3) export : import해오는 파일에서 절대 파일명 수정 불가! 
4) import를 해오는 공간에서 중괄호로 감싸안아서 가져옴 { name }

Node.js에서 페이지 Router는 url에 접속하기 위한 일종의 포털(관문)


1. Server 구축
- listening
- 페이지 라우팅

2. Client 개념
- client는 server한테 request

3. 글로벌 라우터 , client 특정 request 요청 => 출력 시켜주는 요소 컨트롤러 (* 특정 경로의 페이지에 도착했을 때, 실행시킬 콜백함수)

4. 사용자 || 제품 => 다양성 추구 => 무조건 동정파라미터 경로
(*정적 파라미터 경로)


Pug!!! > 서버로서의 역할을 하고 있는 express
> View Engine = 
*videoController.js => 현재 작업하고 있는 메인 루트 폴더를 인식함

분명히 루트폴더 > src > views 폴더 존재!!
그래서 , 템플릿 엔진 ,pug express 설정!!
pug파일을 활용!! => 경로 불일치!!

서버에 process.cwd()=> 현재 실제로 작업중 이라고 인식하고있는 루트폴더가 어디인지 확인!! => 현재 가장 바깥에있는 폴더를 작업을 위한 루트폴더 인식!

view engine의 실제 속성을 세팅 => set( views, 경로)

1) pug를 통해서 반복적으로 복.붙 해야하는 긴 html을 보다 효율적으로 줄임!!
2) scss에서 변수 => include
3) patials => 공통적으로 사용될 html 저장 => 필요 시, 불러옴!
4) 상속 


1.html을 활용해서 웹 브라우저 화면 출력

2. partial > 공통적으로 사용되는 요소를 정의 > include
(*한번 정의한 템플릿 안에 값을 가변적으로 변경 x )

3. block > 특정 pug에 삽입되어야 하는 내용

4. variables > 변수값을 정의하고 삽입

5. conditional > boolean

6. iteration 기능

7. mixin > scss : 템플릿
하나의 템플릿을 만들어놓고 여러 pug에서 가져다가 사용 하고자 하는 목적!

---------------------------------------------------------------------------------------------------------


템플릿 끝내고 / DB 다루고, Hosting


----------------------------------------------------------------------------------------------------------

html요소의 style을 보다 효율적으로 관리
=> mvp.css

*Pug를 활용 > 조건에 따른 UI 구현

*Pug 를 활용 > 반복문 사용
오후 12:17 2024-06-07


Data VS DB
- 서버에 어떤 컨텐츠 내용 존재
- client 요청 (*줄 수 있는 내용)
- 요청 > 수신 > 수정 & 가공 > 발신 > 요청

form > action => url: 
사용자가 어떤 이벤트 및 액션을 실행했을 때, 해당 값을 전달할 주소!

method : get/post

get 혹은 post등의 method를 지정하지 않고 , action의 값만 넣는다면, 기본 default의 method는 get이 됩니다!

get : 서버에 어떤 데이터를 요청
post : 서버에 어떤 데이터를 전달 / db에 있는 값을 바꾸고자 할 때
---------------------------------------------------------
DB // MongoDB => Mongoose
Login 페이지 
UI작업 => 영상 / 수정 / 편집 / 삭제
배포
---------------------------------------------------------
Relational Database Service
USD 3.02

Elastic Compute Cloud
USD 0.42

Virtual Private Cloud
USD 0.29

Data Transfer
USD 0.00

Simple Storage Service
